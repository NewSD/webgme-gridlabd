/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Mon Apr 04 2016 12:03:32 GMT-0700 (PDT).
 */

define([
    'plugin/PluginConfig',
    'plugin/PluginBase',
    'gridlabd/meta',
    'gridlabd/modelLoader',
    'q'
], function (
    PluginConfig,
    PluginBase,
    MetaTypes,
    loader,
    Q) {
    'use strict';

    /**
     * Initializes a new instance of GenerateGLM.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin GenerateGLM.
     * @constructor
     */
    var GenerateGLM = function () {
        // Call base class' constructor.
        PluginBase.call(this);

        this.metaTypes = MetaTypes;
    };

    // Prototypal inheritance from PluginBase.
    GenerateGLM.prototype = Object.create(PluginBase.prototype);
    GenerateGLM.prototype.constructor = GenerateGLM;

    /**
     * Gets the name of the GenerateGLM.
     * @returns {string} The name of the plugin.
     * @public
     */
    GenerateGLM.prototype.getName = function () {
        return 'GenerateGLM';
    };

    /**
     * Gets the semantic version (semver.org) of the GenerateGLM.
     * @returns {string} The version of the plugin.
     * @public
     */
    GenerateGLM.prototype.getVersion = function () {
        return '0.1.0';
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    GenerateGLM.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            modelNode;

	self.updateMETA(self.metaTypes);

	self.result.success = false;

        modelNode = self.activeNode;
	self.model = {};

	return loader.loadPowerModel(self.core, modelNode)
	    .then(function(powerModel) {
		self.powerModel = powerModel;
		self.logger.error(JSON.stringify(self.powerModel,null,2));
	    })
	    .then(function() {
		self.result.setSuccess(true);
		callback(self.activeNode, self.result);
	    })
	    .catch(function(err) {
		self.result.setSuccess(false);
		self.createMessage(self.activeNode, err, 'error');
		callback(self.activeNode, self.result);
	    });
    };

    return GenerateGLM;
});
