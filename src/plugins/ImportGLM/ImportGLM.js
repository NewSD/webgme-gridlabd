/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Mon Apr 04 2016 15:12:25 GMT-0700 (PDT).
 */

define([
    'plugin/PluginConfig',
    'plugin/PluginBase',
    'gridlabd/meta',
    'q'
], function (
    PluginConfig,
    PluginBase,
    MetaTypes,
    Q) {
    'use strict';

    /**
     * Initializes a new instance of ImportGLM.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ImportGLM.
     * @constructor
     */
    var ImportGLM = function () {
        // Call base class' constructor.
        PluginBase.call(this);

        this.metaTypes = MetaTypes;
    };

    // Prototypal inheritance from PluginBase.
    ImportGLM.prototype = Object.create(PluginBase.prototype);
    ImportGLM.prototype.constructor = ImportGLM;

    /**
     * Gets the name of the ImportGLM.
     * @returns {string} The name of the plugin.
     * @public
     */
    ImportGLM.prototype.getName = function () {
        return 'ImportGLM';
    };

    /**
     * Gets the semantic version (semver.org) of the ImportGLM.
     * @returns {string} The version of the plugin.
     * @public
     */
    ImportGLM.prototype.getVersion = function () {
        return '0.1.0';
    };

    ImportGLM.prototype.getConfigStructure = function() {
        return [
            {
                'name': 'glmFile',
                'displayName': 'Gridlab-D Model File',
                'description': 'GLM file for loading as a WebGME Power System Model.',
                'value': '',
                'valueType': 'asset',
                'readOnly': false
            }
        ];
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    ImportGLM.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
        nodeObject;

        self.updateMETA(self.metaTypes);

        // Default fails
        self.result.success = false;

	// fill this out before creating the WebGME nodes
	self.newModel = {};

	var currentConfig = self.getCurrentConfig(),
	glmFileHash = currentConfig.glmFile;

        // Using the coreAPI to make changes.
        nodeObject = self.activeNode;

	self.blobClient.getMetadata(glmFileHash)
	    .then(function(glmMetaData) {
		var splitName = glmMetaData.name.split(".");
		var newName = "";
		for (var i=0;i<splitName.length-1;i++) {
		    newName += splitName[i];
		}
		self.modelName = newName;
		self.newModel.name = newName;
		self.logger.error('loaded model: ' + self.modelName);
	    })
	    .then(function() {
		return self.blobClient.getObjectAsString(glmFileHash)
	    })
	    .then(function(glmFile) {
		return self.parseObjectsFromGLM(glmFile);
	    })
	    .then(function() {
		return self.createModelArtifacts();
	    })
	    .then(function() {
		// This will save the changes. If you don't want to save;
		// exclude self.save and call callback directly from this scope.
		return self.save('ImportGLM updated model.');
	    })
	    .then(function() {
		self.result.setSuccess(true);
		callback(null, self.result);
	    })
	    .catch(function(err) {
		self.logger.error('ERROR:: '+err);
		self.result.setSuccess(false);
		callback(null, self.result);
	    });
    };

    ImportGLM.prototype.parseObjectsFromGLM = function(glmFile) {
	// fill out self.newModel
	var self = this;
	self.parseHeader(glmFile);
	self.parseObject(glmFile, self.newModel);
	//self.logger.error(JSON.stringify(self.newModel,null,2));
    };

    ImportGLM.prototype.parseHeader = function(str) {
	var self = this;
	var regex = /#(\S+)\s+(\S+)\s*=\s*([\S ]+)(?:;)?/gi;
	var matches = regex.exec(str);
	while (matches != null) {
	    var cmd = matches[1];
	    var variable = matches[2];
	    var value = matches[3].replace(/;/gi,'').replace(/'/gi,'');
	    self.newModel[variable] = value;
	    //self.logger.error('got ' + cmd + ' for variable ' + variable + ' and value ' + value);
	    matches = regex.exec(str);
	}
    };

    ImportGLM.prototype.parseClock = function(str, obj) {
	var self = this;
	var splitString = /[\s;]+/;
	var splits;
	var lines = str.split('\n');
	lines.map(function(line) {
	    splits = line.split(splitString)
		.filter(function(obj) { return obj.length > 0; });
	    if (splits.length > 0 && splits[0].indexOf('/') == -1) {
		obj[splits[0]] = splits.slice(1).join(' ');
	    }
	});
	self.newModel.clock = obj;
    };

    ImportGLM.prototype.parseSchedule = function(str, obj) {
	var self = this;
	var splitString = /[\s;\{]+/;
	var splits;
	var lines = str.split('\n');
	obj.entries = [];
	lines.map(function(line) {
	    splits = line.split(splitString)
		.filter(function(obj) { return obj.length > 0; });
	    if ( splits.length > 0 && splits[0].indexOf('/') == -1 ) {
		obj.entries.push(splits)
	    }
	});
	self.newModel[obj.name] = obj;
    };

    ImportGLM.prototype.parseMultiRecorder = function(str, obj) {
	var self = this;
	var splitString = /[\s;]+/;
	var splits;
	var lines = str.split('\n');
	lines.map(function(line) {
	    splits = line.split(splitString)
		.filter(function(obj) { return obj.length > 0; });
	    if ( splits.length > 0 && splits[0].indexOf('/') == -1 ) {
		obj[splits[0]] = splits[1];
	    }
	});
	self.newModel.multiRecorder = obj;
    };

    ImportGLM.prototype.parseObject = function(str, parent) {
	var self = this;
	var splitString = /[\s:\{]+/;
	var submodel_str = '';
	var submodels = [];
	var currentObj = undefined;
	var depth = 0;
	var lines = str.split('\n');
	var splits;
	lines.map(function(line) {
	    if ( line.indexOf('{') > -1 ) {
		if ( depth == 0 ) {
		    splits = line.split(splitString).filter(function(obj) { return obj.length > 0; });
		    if ( splits.length > 0 && splits[0].indexOf('/') == -1 ) {
			var base = splits[0];
			var type = splits[1];
			var name;
			if (splits.length >= 3) {
			    name = splits[2];
			}
			currentObj = {};
			currentObj.type = type;
			currentObj.base = base;
			currentObj.name = name;
		    }
		}
		else {
		    submodel_str += line +'\n';
		}
		depth += 1;
	    }
	    else if ( line.indexOf('}') > -1 ) {
		depth -= 1;
		if ( depth == 0 ) {
		    if (currentObj) {
			if (currentObj.base == 'clock') {
			    currentObj = { type: currentObj.base };
			    self.parseClock(submodel_str, currentObj);
			}
			else if (currentObj.base == 'schedule') {
			    currentObj = { name: currentObj.type, type: currentObj.base };
			    self.parseSchedule(submodel_str, currentObj);
			}
			else if (currentObj.type == 'multi_recorder') {
			    currentObj = { name: currentObj.type, type: currentObj.base };
			    self.parseMultiRecorder(submodel_str, currentObj);
			}
			else {
			    submodels.push({string:submodel_str, object:currentObj});
			}
			currentObj = undefined;
			submodel_str = '';
		    }
		}
		else {
		    submodel_str += line + '\n';
		}
	    }
	    else {
		if (depth >= 1) {
		    // parse property here
		    splits = line.split(splitString).filter(function(obj) { return obj.length > 0; });
		    if (splits && splits[0].indexOf('/') == -1) { // don't want comments
			if (depth == 1)
			    currentObj[splits[0]] = splits[1].replace(';','');
			submodel_str += line + '\n';
		    }
		}
	    }
	});
	submodels.map(function(subModel) {
	    self.parseObject(subModel.string, subModel.object);
	    parent[subModel.object.name] = subModel.object;
	});
    };

    ImportGLM.prototype.createModelArtifacts = function() {
	// use self.newModel
	var self = this;
	var metaNodes = self.core.getAllMetaNodes(self.activeNode);
	var fcoNode = self.core.getBaseRoot(self.activeNode);
	var modelMetaNode = self.META.Model;
	self.logger.error(metaNodes);
	var modelNode = self.core.createNode({parent: self.activeNode, base: modelMetaNode});
	self.core.setAttribute(modelNode, 'name', self.newModel.name);
	for (var oi in self.newModel) {
	    var obj = self.newModel[oi];
	    if ( obj.type ) {
		var newNode = self.core.createNode({parent: modelNode, base: self.META[obj.type]});
		if (obj.name) {
		    self.core.setAttribute(newNode, 'name', obj.name);
		}
	    }
	}
    };

    return ImportGLM;
});
