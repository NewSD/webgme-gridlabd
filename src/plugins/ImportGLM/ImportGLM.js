/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Mon Apr 04 2016 15:12:25 GMT-0700 (PDT).
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'gridlabd/meta',
    'q'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    MetaTypes,
    Q) {
    'use strict';

    /**
     * Initializes a new instance of ImportGLM.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ImportGLM.
     * @constructor
     */
    var ImportGLM = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
        this.metaTypes = MetaTypes;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    ImportGLM.metadata = pluginMetadata;

    // Prototypal inheritance from PluginBase.
    ImportGLM.prototype = Object.create(PluginBase.prototype);
    ImportGLM.prototype.constructor = ImportGLM;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    ImportGLM.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
        nodeObject;

        self.updateMETA(self.metaTypes);

        // Default fails
        self.result.success = false;

	// fill this out before creating the WebGME nodes
	self.newModel = {
	    children: [],
	    attributes: {}
	};

	var currentConfig = self.getCurrentConfig(),
	glmFileHash = currentConfig.glmFile;

        // Using the coreAPI to make changes.
        nodeObject = self.activeNode;

	self.blobClient.getMetadata(glmFileHash)
	    .then(function(glmMetaData) {
		var splitName = glmMetaData.name.split(".");
		var newName = "";
		for (var i=0;i<splitName.length-1;i++) {
		    newName += splitName[i];
		}
		self.modelName = newName;
		self.newModel.name = newName;
		//self.logger.error('loaded model: ' + self.modelName);
	    })
	    .then(function() {
		return self.blobClient.getObjectAsString(glmFileHash)
	    })
	    .then(function(glmFile) {
		return self.parseObjectsFromGLM(glmFile);
	    })
	    .then(function() {
		return self.createModelArtifacts();
	    })
	    .then(function() {
		// This will save the changes. If you don't want to save;
		// exclude self.save and call callback directly from this scope.
		return self.save('ImportGLM updated model.');
	    })
	    .then(function() {
		self.result.setSuccess(true);
		callback(null, self.result);
	    })
	    .catch(function(err) {
		self.logger.error('ERROR:: '+err);
		self.result.setSuccess(false);
		callback(null, self.result);
	    });
    };

    ImportGLM.prototype.parseObjectsFromGLM = function(glmFile) {
	// fill out self.newModel
	var self = this,
	    objLinesByDepth = [],
	    objByDepth = [];
	// remove the comments
	glmFile = self.removeComments(glmFile);
	// split the file into lines
	var lines = glmFile.split('\n');
	lines.map((line) => {
	    var macro_regex = /^#/gm,
		container_regex = /(\w+)\s+(\w+)?:?([\.\d]+)?\s*{/gm,
		container_end_regex = /};?$/gm;
	    if (macro_regex.test(line)) {
		var obj = self.parseMacro(line, self.newModel);
		self.newModel.children.push(obj);
	    }
	    else if (container_regex.test(line)) {
		// start object / module / class / clock / schedule
		objByDepth.push( self.getObjStub(line) );
		objLinesByDepth.push([line]);
	    }
	    else if (container_end_regex.test(line)) {
		// end object / module / class / clock / schedule
		var obj = objByDepth.pop();
		var objLines = objLinesByDepth.pop();
		obj = self.parseObject(objLines, obj);
		if (objByDepth.length > 0) {
		    obj.parent = objByDepth[objByDepth.length-1];
		}
		self.newModel.children.push(obj);
	    }
	    else {
		// add to current object list
		objLinesByDepth[objLinesByDepth.length - 1].push(line);
	    }
	});
    };

    ImportGLM.prototype.getObjStub = function(line) {
	var container_regex = /(\w+)\s+(\w+)?:?([\.\d]+)?\s*{/gm,
	    obj = {
		name: null,
		type: null,
		base: null,
		attributes: [],
		pointers: []
	    },
	    results = container_regex.exec(line);
	obj.base = results[1];
	if (obj.base == 'clock') {
	}
	else if (obj.base == 'schedule' ||
		 obj.base == 'module' ||
		 obj.base == 'class') {
	    obj.name = results[2];
	}
	else if (obj.base == 'object') {
	    obj.type = results[2];
	    obj.name = results[3];
	}
	return obj;
    };

    ImportGLM.prototype.removeComments = function(str) {
	var self = this,
	    regex = /(?:[\s]*|^)\/\/.*$/gm;
	return str.replace(regex, '');
    };
    
    ImportGLM.prototype.parseMacro = function(line) {
	// parses anything in GLM that starts with '#'
	var self = this,
	    obj;
	if (line.indexOf('#setenv') > -1)
	    obj = self.parseVariable(line);
	else
	    obj = self.parseGlobal(line);
	return obj;
    };

    ImportGLM.prototype.parseGlobal = function(line) {
	// globals set by: #set <global>="<value>"
	//             or: #define <global>="<value>"
	var self = this,
	    obj,
	    regex = /#(define|set)\s+(\S+)\s*=\s*([\w '"]+);?/gim;
	obj = {
	    name: null,
	    base: 'Global',
	    attributes: [
		{
		    name: 'Value',
		    value: null
		}
	    ]
	};
	return obj;
    };

    ImportGLM.prototype.parseVariable = function(line) {
	// environment variables set by: #setenv <variable>=<expression>
	var self = this,
	    obj,
	    regex = /#setenv\s+(\S+)\s*=\s*([\w '"]+);?/gim;
	obj = {
	    name: null,
	    base: 'Variable',
	    attributes: [
		{
		    name: 'Expression',
		    value: null
		}
	    ]
	};
	return obj;
    };

    ImportGLM.prototype.parseClock = function(lines, obj) {
	var self = this;
	var patterns = [
		/(timestamp)\s+'([^\/\n\r\v]*)';/gi,
		/(stoptime)\s+'([^\/\n\r\v]*)';/gi,
		/(timezone)\s+([^\/\n\r\v]*);/gi
	];

	patterns.map(function(pattern) {
	    var matches = pattern.exec(str);
	    while (matches != null) {
		var key = matches[1];
		var value = matches[2];
		obj.attributes[key] = value;
		matches = pattern.exec(str);
	    }
	});
	return obj;
    };

    ImportGLM.prototype.parseSchedule = function(lines, obj) {
	var self = this,
	    lines = str.split('\n'),
	    id = 0;
	lines.map(function(line) {
	    var pattern = /([\s]+[\d\*\.]+[\-\.\d]*)+/gi; 
	    var matches = pattern.exec(line);
	    if (matches) {
		var splits = matches[0].split(new RegExp(" |\t|\s|;",'g')).filter(function(obj) {return obj.length > 0;});
		if ( splits.length >= 5 ) {
		    var entry = {
			attributes: {
			    name: 'Entry_' + id++,
			    Minutes: splits[0],
			    Hours: splits[1],
			    Days: splits[2],
			    Months: splits[3],
			    Weekdays: splits[4]
			}
		    };
		    if (splits.length > 5)
			entry.attributes.Value = splits[5];
		    obj.children.push(entry)
		}
		else {
		    throw new String('Schedule ' + obj.name + ' has improperly formmated entry: ' + line);
		}
	    }
	});
	self.newModel.children.push(obj);
    };

    ImportGLM.prototype.parseModule = function(lines, obj) {
	regex = /^module (\w+);$/gim;
	matches = regex.exec(str);
	while (matches != null) {
	    var moduleName = matches[1];
	    var obj = {
		name: moduleName,
		type: 'module',
		base: 'module',
		children: [],
		attributes: {},
		pointers: {}
	    };
	    self.newModel.children.push(obj);
	    matches = regex.exec(str);
	}
    };

    ImportGLM.prototype.parseClass = function(str, obj) {
	var self = this;
	var splitString = /[\s;]+/gi;
	var splits;
	var lines = str.split('\n');
	lines.map(function(line) {
	    splits = line.split(splitString)
		.filter(function(obj) { return obj.length > 0; });
	    if ( splits.length > 0 && splits[0].indexOf('/') == -1 ) {
		obj.attributes[splits[1]] = splits[0];
	    }
	});
	self.newModel.children.push(obj);
    };

    ImportGLM.prototype.parseObject = function(str, parent) {
	var self = this;
	var splitString = /[\s\{]+/gi;
	var submodel_str = '';
	var submodels = [];
	var currentObj = undefined;
	var depth = 0;
	var lines = str.split('\n');
	var splits;
	lines.map(function(line) {
	    if ( !line ) return;
	    if ( line.indexOf('{') > -1 ) {
		if ( depth == 0 ) {
		    splits = line.split(splitString).filter(function(obj) { return obj.length > 0; });
		    if ( splits.length > 0 && splits[0].indexOf('/') == -1 ) {
			var base = splits[0];
			var type;
			var name;
			if (splits[1] && splits[1].indexOf(':') > -1) {
			    var tmp = splits[1].split(':');
			    type = tmp[0];
			    name = tmp[1];
			}
			else if (splits[1]) {
			    type = splits[1];
			}
			currentObj = {
			    type: type,
			    base: base,
			    name: name,
			    children: [],
			    attributes: {},
			    pointers: {}
			};
		    }
		}
		else {
		    submodel_str += line +'\n';
		}
		depth += 1;
	    }
	    else if ( line.indexOf('}') > -1 ) {
		depth -= 1;
		if ( depth == 0 ) {
		    if (currentObj) {
			if (currentObj.base == 'clock') {
			    currentObj.type = currentObj.base;
			    currentObj.attributes = {};
			    self.parseClock(submodel_str, currentObj);
			}
			else if (currentObj.base == 'schedule') {
			    currentObj.name = currentObj.type;
			    currentObj.type = currentObj.base;
			    currentObj.attributes = {};
			    self.parseSchedule(submodel_str, currentObj);
			}
			else if (currentObj.base == 'class') {
			    currentObj.name = currentObj.type;
			    currentObj.type = currentObj.base;
			    currentObj.attributes = {};
			    self.parseClass(submodel_str, currentObj);
			}
			else {
			    submodels.push({string:submodel_str, object:currentObj});
			}
			currentObj = undefined;
			submodel_str = '';
		    }
		}
		else {
		    submodel_str += line + '\n';
		}
	    }
	    else {
		if (depth >= 1) {
		    // parse property here
		    splits = line.split(/;/gi).filter(function(s) { return s.length > 0; });
		    //self.logger.error(splits);
		    if (splits && splits[0].indexOf('//') == -1) { // don't want comments
			if (depth == 1) {
			    var newSplits = splits[0].split(/\s/g).filter(function(s) { return s.length > 0; });
			    var attr = newSplits[0];
			    var val = newSplits.slice(1).join(' ').replace(/"/g,'');
			    if (attr=='name') {
				currentObj.name = val;
			    }
			    currentObj.attributes[attr] = val;
			}
			submodel_str += line + '\n';
		    }
		}
	    }
	});
	submodels.map(function(subModel) {
	    self.parseObject(subModel.string, subModel.object);
	    if (parent !== self.newModel)
		subModel.object.attributes.parent = parent.name;
	    self.newModel.children.push(subModel.object);
	});
    };

    // When saving the objects, need to check against META to figure out what the relevant pointers and attributes are:
    // self.core.getValidAttributeNames(self.META[<type>])
    // self.core.getValidPointerNames(self.META[<type>])
    
    ImportGLM.prototype.saveObject = function(obj) {
	var self = this;
	var base = obj.type || obj.base;
	var newNode = self.core.createNode({parent: self.newModel.node, base: self.META[base]});
	self.core.setAttribute(newNode, 'name', obj.name);
	obj.attributes.map((attr) => {
	    // set any attributes here
	    self.core.setAttribute(newNode, attr.name, attr.value);
	});
	obj.pointers.map((ptr) => {
	    // create any pointers here
	    var ptrObj = self.createdObjects[ptr.target];
	    if (!ptrObj) {
		self.saveObject(ptr.target);
	    }
	    self.core.setPointer(newNode, ptr.name, ptrObj.node);
	});
	obj.node = newNode;
	if (obj.parent) {
	    // create parent object with src/dst here
	    var parentObj = self.createdObjects[obj.parent];
	    if (!parentObj) {
		self.saveObject(obj.parent);
	    }
	    var parent = self.core.createNode({parent: self.newModel.node, base: self.META.Parent});
	    self.core.setPointer(parent, 'src', obj.node);
	    self.core.setPointer(parent, 'dst', parentObj);
	}
	self.createdObjects[obj.name] = obj;
    };

    ImportGLM.prototype.createModelArtifacts = function() {
	// use self.newModel
	var self = this;
	self.createdObjects = {};
	var modelMetaNode = self.META.Model;
	var modelNode = self.core.createNode({parent: self.activeNode, base: modelMetaNode});
	self.core.setAttribute(modelNode, 'name', self.newModel.name);
	self.newModel.attributes.map((attr) => {
	    self.core.setAttribute(modelNode, attr.name, attr.value);
	});
	self.newModel.node = modelNode;
	self.newModel.children.map(function(obj) {
	    self.saveObject(obj, modelNode);
	});
    };

    return ImportGLM;
});
